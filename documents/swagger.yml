swagger: '2.0'
info:
  description: Api Documentation
  version: '1.0'
  title: Api Documentation
  termsOfService: urn:tos
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
host: localhost:8080
basePath: /moviehall
tags:
  - name: APIs for managing movie halls
    description: Movie Hall Controller
paths:
  /book-ticket:
    post:
      tags:
        - APIs for managing movie halls
      summary: API to book tickets for the given user
      operationId: bookTicketUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: ticketBookingRequest
          description: ticketBookingRequest
          required: true
          schema:
            $ref: '#/definitions/TicketBookingRequestDto'
      responses:
        '200':
          description: Successfully booked the ticket
          schema:
            type: string
        '201':
          description: Created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
      deprecated: false
  /cancel-ticket/{userId}/{ticketId}:
    post:
      tags:
        - APIs for managing movie halls
      summary: API to cancel a booked ticket for the given user
      operationId: cancelTicketUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: ticketId
          in: path
          description: ticketId
          required: true
          type: string
        - name: userId
          in: path
          description: userId
          required: true
          type: string
      responses:
        '200':
          description: Successfully cancelled the ticket
          schema:
            type: string
        '201':
          description: Created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: ticket not found
      deprecated: false
  /movie-hall/{townId}:
    get:
      tags:
        - APIs for managing movie halls
      summary: API to fetch all movie halls for the given town
      operationId: getMovieHallUsingGET
      produces:
        - '*/*'
      parameters:
        - name: townId
          in: path
          description: townId
          required: true
          type: string
      responses:
        '200':
          description: Successfully retrieved the movie halls
          schema:
            type: array
            items:
              $ref: '#/definitions/MovieHallResponseDto'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: town not found
      deprecated: false
  /movie-upload:
    post:
      tags:
        - APIs for managing movie halls
      summary: API to upload movie schedules
      operationId: uploadMovieScheduleUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: movieScheduleRequest
          description: movieScheduleRequest
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/MovieScheduleRequestDto'
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Successfully created the movie schedule
          schema:
            type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
      deprecated: false
  /screen/{movieHallId}:
    get:
      tags:
        - APIs for managing movie halls
      summary: API to fetch screens for the given movie hall
      operationId: getScreenUsingGET
      produces:
        - '*/*'
      parameters:
        - name: movieHallId
          in: path
          description: movieHallId
          required: true
          type: string
      responses:
        '200':
          description: Successfully retrieved the screens
          schema:
            type: array
            items:
              $ref: '#/definitions/ScreenResponseDto'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: movie hall not found
      deprecated: false
  /seat/{screenId}:
    get:
      tags:
        - APIs for managing movie halls
      summary: API to fetch the available seats for the given screen
      operationId: getAvailableSeatUsingGET
      produces:
        - '*/*'
      parameters:
        - name: screenId
          in: path
          description: screenId
          required: true
          type: string
      responses:
        '200':
          description: Successfully retrieved the available seats
          schema:
            type: array
            items:
              $ref: '#/definitions/SeatResponseDto'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: screen not found
      deprecated: false
  /ticket-report/{hallId}/{date}:
    get:
      tags:
        - APIs for managing movie halls
      summary: API to get the reports of sold tickets for the given date and hall
      operationId: getSoldTicketReportUsingGET
      produces:
        - '*/*'
      parameters:
        - name: date
          in: path
          description: date
          required: true
          type: string
          format: date
        - name: hallId
          in: path
          description: hallId
          required: true
          type: string
      responses:
        '200':
          description: Successfully retrieved the report
          schema:
            type: array
            items:
              $ref: '#/definitions/TicketReportResponseDto'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: report not found
      deprecated: false
  /user/{emailId}/{roleId}:
    post:
      tags:
        - APIs for managing movie halls
      summary: API to update user role
      operationId: updateRoleUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: emailId
          in: path
          description: emailId
          required: true
          type: string
        - name: roleId
          in: path
          description: roleId
          required: true
          type: string
      responses:
        '200':
          description: Successfully updated the role
          schema:
            type: string
        '201':
          description: Created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: user not found
      deprecated: false
definitions:
  MovieHallResponseDto:
    type: object
    properties:
      hallId:
        type: string
      hallName:
        type: string
      screens:
        type: array
        items:
          $ref: '#/definitions/ScreenResponseDto'
    title: MovieHallResponseDto
  MovieScheduleRequestDto:
    type: object
    properties:
      fromDate:
        type: string
        format: date-time
      movieId:
        type: string
      screenId:
        type: string
      showTime:
        type: string
      toDate:
        type: string
        format: date-time
    title: MovieScheduleRequestDto
  ScreenResponseDto:
    type: object
    properties:
      screenId:
        type: string
      screenNumber:
        type: integer
        format: int32
      seatCount:
        type: integer
        format: int32
    title: ScreenResponseDto
  SeatResponseDto:
    type: object
    properties:
      seatId:
        type: string
      seatNumber:
        type: integer
        format: int32
      seatType:
        $ref: '#/definitions/SeatTypeResponseDto'
    title: SeatResponseDto
  SeatTypeResponseDto:
    type: object
    properties:
      rate:
        type: number
        format: float
      type:
        type: string
    title: SeatTypeResponseDto
  TicketBookingRequestDto:
    type: object
    properties:
      scheduleId:
        type: string
      seats:
        type: array
        items:
          type: string
      userId:
        type: string
    title: TicketBookingRequestDto
  TicketReportResponseDto:
    type: object
    properties:
      screenNumber:
        type: string
      totalRevenue:
        type: number
        format: float
      totalTicketsSold:
        type: string
    title: TicketReportResponseDto
